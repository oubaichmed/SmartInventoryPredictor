@page "/products"
@inject ApiService ApiService
@inject IJSRuntime JSRuntime

<PageTitle>Products - Smart Inventory Predictor</PageTitle>

<div class="row mb-4">
    <div class="col">
        <h1 class="h2 mb-0">Products</h1>
        <p class="text-muted">Manage your product catalog</p>
    </div>
    <div class="col-auto">
        <button class="btn btn-primary" @onclick="() => ShowProductModal()">
            <i class="fas fa-plus me-2"></i>
            Add Product
        </button>
    </div>
</div>

<!-- Filters -->
<div class="row mb-4">
    <div class="col-md-4">
        <select class="form-select" @bind="_selectedCategory" @bind:after="OnCategoryChanged">
            <option value="">All Categories</option>
            @foreach (var category in _categories)
            {
                <option value="@category">@category</option>
            }
        </select>
    </div>
    <div class="col-md-4">
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" @bind="_showLowStockOnly" @bind:after="OnFilterChanged">
            <label class="form-check-label" for="lowStockFilter">
                Show Low Stock Only
            </label>
        </div>
    </div>
    <div class="col-md-4">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search products..." @bind="_searchTerm" @onkeyup="OnSearchChanged">
            <button class="btn btn-outline-secondary" type="button" @onclick="OnSearchChanged">
                <i class="fas fa-search"></i>
            </button>
        </div>
    </div>
</div>

@if (_isLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary"></div>
        <p class="mt-3">Loading products...</p>
    </div>
}
else if (_products.Any())
{
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>SKU</th>
                            <th>Category</th>
                            <th>Price</th>
                            <th>Stock</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in _products)
                        {
                            <tr>
                                <td>@product.Name</td>
                                <td><code>@product.SKU</code></td>
                                <td>@product.Category</td>
                                <td>@product.UnitPrice.ToString("C")</td>
                                <td>
                                    <span class="fw-bold">@product.CurrentStock</span>
                                    <small class="text-muted">/ @product.MinimumStock min</small>
                                </td>
                                <td>
                                    <span class="badge @GetStockBadgeClass(product.StockStatus)">
                                        @product.StockStatus Stock
                                    </span>
                                </td>
                                <td>
                                    <div class="btn-group btn-group-sm">
                                        <button class="btn btn-outline-primary" @onclick="() => ShowProductModal(product)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-outline-danger" @onclick="() => DeleteProduct(product.Id)">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
else
{
    <div class="alert alert-info">
        <i class="fas fa-info-circle me-2"></i>
        No products found. @(_searchTerm != null ? "Try adjusting your search criteria." : "Click 'Add Product' to get started.")
    </div>
}

<!-- Product Modal -->
@if (_showModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(_editingProduct?.Id > 0 ? "Edit Product" : "Add Product")</h5>
                    <button type="button" class="btn-close" @onclick="HideProductModal"></button>
                </div>
                <div class="modal-body">
                    <form @onsubmit="SaveProduct" @onsubmit:preventDefault="true">
                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <input type="text" class="form-control" @bind="_editingProduct!.Name" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">SKU</label>
                            <input type="text" class="form-control" @bind="_editingProduct!.SKU" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Category</label>
                            <select class="form-select" @bind="_editingProduct!.Category" required>
                                <option value="">Select Category</option>
                                @foreach (var category in _categories)
                                {
                                    <option value="@category">@category</option>
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Unit Price</label>
                            <input type="number" step="0.01" class="form-control" @bind="_editingProduct!.UnitPrice" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Current Stock</label>
                            <input type="number" class="form-control" @bind="_editingProduct!.CurrentStock" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Minimum Stock</label>
                            <input type="number" class="form-control" @bind="_editingProduct!.MinimumStock" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideProductModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveProduct" disabled="@_isSaving">
                        @if (_isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        @(_editingProduct?.Id > 0 ? "Update" : "Create")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ProductDto> _products = new();
    private List<string> _categories = new();
    private bool _isLoading = true;
    private bool _isSaving = false;
    private bool _showModal = false;
    private string _selectedCategory = "";
    private bool _showLowStockOnly = false;
    private string? _searchTerm;
    private ProductDto? _editingProduct;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        await LoadProducts();
    }

    private async Task LoadCategories()
    {
        _categories = await ApiService.GetCategoriesAsync();
        _categories.AddRange(new[] { "Electronics", "Clothing", "Books", "Home & Garden", "Sports", "Toys" });
        _categories = _categories.Distinct().OrderBy(c => c).ToList();
    }

    private async Task LoadProducts()
    {
        _isLoading = true;
        StateHasChanged();

        _products = await ApiService.GetProductsAsync(_selectedCategory, _showLowStockOnly);
        
        if (!string.IsNullOrEmpty(_searchTerm))
        {
            _products = _products.Where(p => 
                p.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                p.SKU.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                p.Category.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        _isLoading = false;
        StateHasChanged();
    }

    private async Task OnCategoryChanged()
    {
        await LoadProducts();
    }

    private async Task OnFilterChanged()
    {
        await LoadProducts();
    }

    private async Task OnSearchChanged()
    {
        await LoadProducts();
    }

    private void ShowProductModal(ProductDto? product = null)
    {
        _editingProduct = product != null ? new ProductDto
        {
            Id = product.Id,
            Name = product.Name,
            SKU = product.SKU,
            Category = product.Category,
            UnitPrice = product.UnitPrice,
            CurrentStock = product.CurrentStock,
            MinimumStock = product.MinimumStock
        } : new ProductDto();
        _showModal = true;
        StateHasChanged();
    }

    private void HideProductModal()
    {
        _showModal = false;
        _editingProduct = null;
        StateHasChanged();
    }

    private async Task SaveProduct()
    {
        if (_editingProduct == null) return;

        _isSaving = true;
        StateHasChanged();

        bool success;
        if (_editingProduct.Id > 0)
        {
            var updateDto = new UpdateProductDto
            {
                Id = _editingProduct.Id,
                Name = _editingProduct.Name,
                SKU = _editingProduct.SKU,
                Category = _editingProduct.Category,
                UnitPrice = _editingProduct.UnitPrice,
                CurrentStock = _editingProduct.CurrentStock,
                MinimumStock = _editingProduct.MinimumStock
            };
            success = await ApiService.UpdateProductAsync(updateDto);
        }
        else
        {
            var createDto = new CreateProductDto
            {
                Name = _editingProduct.Name,
                SKU = _editingProduct.SKU,
                Category = _editingProduct.Category,
                UnitPrice = _editingProduct.UnitPrice,
                CurrentStock = _editingProduct.CurrentStock,
                MinimumStock = _editingProduct.MinimumStock
            };
            success = await ApiService.CreateProductAsync(createDto);
        }

        _isSaving = false;

        if (success)
        {
            HideProductModal();
            await LoadProducts();
            await ShowToast(_editingProduct.Id > 0 ? "Product updated successfully!" : "Product created successfully!", "success");
        }
        else
        {
            await ShowToast("Failed to save product. Please try again.", "error");
        }
    }

    private async Task DeleteProduct(int productId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this product?"))
        {
            var success = await ApiService.DeleteProductAsync(productId);
            if (success)
            {
                await LoadProducts();
                await ShowToast("Product deleted successfully!", "success");
            }
            else
            {
                await ShowToast("Failed to delete product. Please try again.", "error");
            }
        }
    }

    private string GetStockBadgeClass(string status)
    {
        return status switch
        {
            "Low" => "bg-danger",
            "Medium" => "bg-warning",
            "High" => "bg-success",
            _ => "bg-secondary"
        };
    }

    private async Task ShowToast(string message, string type)
    {
        var toastClass = type switch
        {
            "success" => "toast-success",
            "error" => "toast-error",
            "warning" => "toast-warning",
            _ => "toast-info"
        };

        await JSRuntime.InvokeVoidAsync("showToast", message, toastClass);
    }
}