@if (Visible)
{
    <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1055;">
        <div class="toast show align-items-center text-white bg-@GetBootstrapClass() border-0" role="alert">
            <div class="d-flex">
                <div class="toast-body">
                    <i class="fas fa-@GetIconClass() me-2"></i>
                    @Message
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" @onclick="Hide"></button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool Visible { get; set; } = false;
    [Parameter] public string Type { get; set; } = "info"; // success, danger, warning, info
    [Parameter] public string Message { get; set; } = "";
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }

    private string GetBootstrapClass() => Type switch
    {
        "success" => "success",
        "error" => "danger",
        "danger" => "danger",
        "warning" => "warning",
        _ => "info"
    };

    private string GetIconClass() => Type switch
    {
        "success" => "check-circle",
        "error" => "exclamation-triangle",
        "danger" => "exclamation-triangle",
        "warning" => "exclamation-triangle",
        _ => "info-circle"
    };

    private async Task Hide()
    {
        Visible = false;
        await VisibleChanged.InvokeAsync(Visible);
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Visible)
        {
            // Auto-hide after 5 seconds
            _ = Task.Delay(5000).ContinueWith(async _ =>
            {
                if (Visible)
                {
                    await InvokeAsync(Hide);
                }
            });
        }
    }
}
