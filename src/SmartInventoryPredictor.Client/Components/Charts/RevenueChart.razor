@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="chart-container">
    <canvas id="@ChartId"></canvas>
</div>

@code {
    [Parameter] public string ChartId { get; set; } = "revenueChart";
    [Parameter] public List<RevenueDataDto> RevenueData { get; set; } = new();
    [Parameter] public bool IsDarkTheme { get; set; } = false;

    private IJSObjectReference? _chart;

    protected override async Task OnParametersSetAsync()
    {
        if (RevenueData.Any())
        {
            await CreateChart();
        }
    }

    private async Task CreateChart()
    {
        if (_chart != null)
        {
            await JSRuntime.InvokeVoidAsync("chartHelpers.destroyChart", _chart);
        }

        await Task.Delay(100); // Allow DOM to update

        var config = new
        {
            type = "line",
            data = new
            {
                labels = RevenueData.Select(r => r.Date.ToString("MM/dd")).ToArray(),
                datasets = new[]
                {
                    new
                    {
                        label = "Daily Revenue",
                        data = RevenueData.Select(r => r.Revenue).ToArray(),
                        borderColor = IsDarkTheme ? "#60a5fa" : "#3b82f6",
                        backgroundColor = IsDarkTheme ? "rgba(96, 165, 250, 0.1)" : "rgba(59, 130, 246, 0.1)",
                        tension = 0.4,
                        fill = true
                    }
                }
            },
            options = new
            {
                responsive = true,
                maintainAspectRatio = false,
                plugins = new
                {
                    legend = new
                    {
                        labels = new
                        {
                            color = IsDarkTheme ? "#ffffff" : "#374151"
                        }
                    }
                },
                scales = new
                {
                    x = new
                    {
                        grid = new
                        {
                            color = IsDarkTheme ? "#374151" : "#e5e7eb"
                        },
                        ticks = new
                        {
                            color = IsDarkTheme ? "#9ca3af" : "#6b7280"
                        }
                    },
                    y = new
                    {
                        grid = new
                        {
                            color = IsDarkTheme ? "#374151" : "#e5e7eb"
                        },
                        ticks = new
                        {
                            color = IsDarkTheme ? "#9ca3af" : "#6b7280",
                            callback = "function(value) { return '$' + value.toLocaleString(); }"
                        }
                    }
                }
            }
        };

        _chart = await JSRuntime.InvokeAsync<IJSObjectReference>("chartHelpers.createChart", ChartId, config);
    }

    public async ValueTask DisposeAsync()
    {
        if (_chart != null)
        {
            await JSRuntime.InvokeVoidAsync("chartHelpers.destroyChart", _chart);
            await _chart.DisposeAsync();
        }
    }
}