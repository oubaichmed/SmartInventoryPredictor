@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="chart-container">
    <canvas id="@ChartId"></canvas>
</div>

@code {
    [Parameter] public string ChartId { get; set; } = "inventoryChart";
    [Parameter] public List<CategoryStockDto> CategoryData { get; set; } = new();
    [Parameter] public bool IsDarkTheme { get; set; } = false;

    private IJSObjectReference? _chart;

    protected override async Task OnParametersSetAsync()
    {
        if (CategoryData.Any())
        {
            await CreateChart();
        }
    }

    private async Task CreateChart()
    {
        if (_chart != null)
        {
            await JSRuntime.InvokeVoidAsync("chartHelpers.destroyChart", _chart);
        }

        await Task.Delay(100); // Allow DOM to update

        var config = new
        {
            type = "doughnut",
            data = new
            {
                labels = CategoryData.Select(c => c.Category).ToArray(),
                datasets = new[]
                {
                    new
                    {
                        label = "Stock Value",
                        data = CategoryData.Select(c => c.TotalValue).ToArray(),
                        backgroundColor = new[]
                        {
                            "#FF6384",
                            "#36A2EB",
                            "#FFCE56",
                            "#4BC0C0",
                            "#9966FF",
                            "#FF9F40",
                            "#FF6384",
                            "#C9CBCF"
                        },
                        borderColor = IsDarkTheme ? "#374151" : "#ffffff",
                        borderWidth = 2
                    }
                }
            },
            options = new
            {
                responsive = true,
                maintainAspectRatio = false,
                plugins = new
                {
                    legend = new
                    {
                        position = "bottom",
                        labels = new
                        {
                            color = IsDarkTheme ? "#ffffff" : "#374151",
                            padding = 20
                        }
                    },
                    tooltip = new
                    {
                        callbacks = new
                        {
                            label = "function(context) { return context.label + ': $' + context.parsed.toLocaleString(); }"
                        }
                    }
                }
            }
        };

        _chart = await JSRuntime.InvokeAsync<IJSObjectReference>("chartHelpers.createChart", ChartId, config);
    }

    public async ValueTask DisposeAsync()
    {
        if (_chart != null)
        {
            await JSRuntime.InvokeVoidAsync("chartHelpers.destroyChart", _chart);
            await _chart.DisposeAsync();
        }
    }
}